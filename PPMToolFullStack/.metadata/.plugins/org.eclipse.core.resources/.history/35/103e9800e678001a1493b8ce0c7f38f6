package com.sathish.reactapplication.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.sathish.reactapplication.domain.Backlog;
import com.sathish.reactapplication.domain.Project;
import com.sathish.reactapplication.domain.ProjectTask;
import com.sathish.reactapplication.exception.ProjectNotFoundException;
import com.sathish.reactapplication.repositories.BacklogRepository;
import com.sathish.reactapplication.repositories.ProjectTaskRepository;

@Service
public class ProjectTaskService {
	@Autowired
	private BacklogRepository backlogRepository;
	@Autowired
	private ProjectTaskRepository projectTaskRepository;
	@Autowired
	private ProjectService projectService;

	@CacheEvict(value = "projectTasks", allEntries = true)
	public ProjectTask addProjectTask(String projectIdentifier, ProjectTask projectTask, String username) {
		Project project = projectService.findByProjectIdentifier(projectIdentifier, username);
		Backlog backlog = project.getBacklog();
		if (backlog == null)
			throw new ProjectNotFoundException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
		else {
			Integer sequence = backlog.getPTSequence() + 1;
			backlog.setPTSequence(sequence);
			projectTask.setBacklog(backlog);
			projectTask.setProjectSequence(projectIdentifier.toUpperCase() + "-" + sequence);
			projectTask.setProjectIdentifier(projectIdentifier.toUpperCase());
			if (projectTask.getPriority() == null||projectTask.getPriority() == Integer.valueOf(0))
				projectTask.setPriority(Integer.valueOf(3));
			if (projectTask.getStatus() == "" || projectTask.getStatus() == null)
				projectTask.setStatus("TO_DO");
			return projectTaskRepository.save(projectTask);
		}
	}
	@Cacheable(value = "projectTasks")
	public List<ProjectTask> findAllProjectTaskByIdentifier(String projectIdentifier, String username) {
		Project project = projectService.findByProjectIdentifier(projectIdentifier, username);
		Backlog backlog = project.getBacklog();
		if (backlog == null)
			throw new ProjectNotFoundException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
		else
			return projectTaskRepository.findByProjectIdentifierOrderByPriority(projectIdentifier);
	}

	public ProjectTask findProjectTaskBySequence(String projectIdentifier, String sequence, String username) {
		Project project = projectService.findByProjectIdentifier(projectIdentifier, username);
		Backlog backlog = project.getBacklog();
		if (backlog == null)
			throw new ProjectNotFoundException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
		ProjectTask task = projectTaskRepository.findByProjectSequence(sequence);
		if (task == null)
			throw new ProjectNotFoundException("Project Task '" + sequence.toUpperCase() + "' doesn't exists");
		ProjectTask projectTask = projectTaskRepository.findByProjectIdentifierAndProjectSequence(projectIdentifier,
				sequence);
		if (projectTask == null)
			throw new ProjectNotFoundException("Project Task '" + sequence.toUpperCase()
					+ "' doesn't exists in Project ID '" + projectIdentifier.toUpperCase());
		return projectTask;
	}

	@CacheEvict(value = "projectTasks", allEntries = true)
	public ProjectTask updateProjectTaskBySequence(ProjectTask projectTask, String projectIdentifier, String sequence, String username) {
		findProjectTaskBySequence(projectIdentifier, sequence, username);
		return projectTaskRepository.save(projectTask);
	}

	@CacheEvict(value = "projectTasks", allEntries = true)
	public void deleteProjectTaskBySequence(String projectIdentifier, String sequence, String username) {
		ProjectTask projectTask = findProjectTaskBySequence(projectIdentifier, sequence, username);
		projectTaskRepository.deleteById(projectTask.getId());
	}

}
