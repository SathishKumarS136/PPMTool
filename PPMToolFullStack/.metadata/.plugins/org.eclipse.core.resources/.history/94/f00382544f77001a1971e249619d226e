package com.sathish.reactapplication.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sathish.reactapplication.domain.Backlog;
import com.sathish.reactapplication.domain.ProjectTask;
import com.sathish.reactapplication.exception.ProjectNotFoundException;
import com.sathish.reactapplication.repositories.BacklogRepository;
import com.sathish.reactapplication.repositories.ProjectTaskRepository;

@Service
public class ProjectTaskService {
	@Autowired
	private BacklogRepository backlogRepository;
	@Autowired
	private ProjectTaskRepository projectTaskRepository;

	public ProjectTask addProjectTask(String projectIdentifier, ProjectTask projectTask) {
		Backlog backlog = backlogRepository.findByProjectIdentifier(projectIdentifier.toUpperCase());
		if (backlog == null)
			throw new ProjectNotFoundException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
		else {
			Integer sequence = backlog.getPTSequence() + 1;
			backlog.setPTSequence(sequence);
			projectTask.setBacklog(backlog);
			projectTask.setProjectSequence(projectIdentifier.toUpperCase() + "-" + sequence);
			projectTask.setProjectIdentifier(projectIdentifier.toUpperCase());
			if (projectTask.getPriority() == Integer.valueOf(0) || projectTask.getPriority() == null)
				projectTask.setPriority(Integer.valueOf(3));
			if (projectTask.getStatus() == "" || projectTask.getStatus() == null)
				projectTask.setStatus("TO_DO");
			return projectTaskRepository.save(projectTask);
		}
	}

	public List<ProjectTask> findAllProjectTaskByIdentifier(String projectIdentifier) {
		Backlog backlog = backlogRepository.findByProjectIdentifier(projectIdentifier.toUpperCase());
		if (backlog == null)
			throw new ProjectNotFoundException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
		else
			return projectTaskRepository.findByProjectIdentifierOrderByPriority(projectIdentifier);
	}

	public ProjectTask findProjectTaskBySequence(String projectIdentifier, String sequence) {
		Backlog backlog = backlogRepository.findByProjectIdentifier(projectIdentifier.toUpperCase());
		if (backlog == null)
			throw new ProjectNotFoundException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
		ProjectTask task = projectTaskRepository.findByProjectSequence(sequence);
		if (task == null)
			throw new ProjectNotFoundException("Project Task '" + sequence.toUpperCase() + "' doesn't exists");
		ProjectTask projectTask = projectTaskRepository.findByProjectIdentifierAndProjectSequence(projectIdentifier,
				sequence);
		if (projectTask == null)
			throw new ProjectNotFoundException("Project Task '" + sequence.toUpperCase()
					+ "' doesn't exists in Project ID '" + projectIdentifier.toUpperCase());
		return projectTask;
	}

	public ProjectTask updateProjectTaskBySequence(ProjectTask projectTask, String projectIdentifier, String sequence) {
		findProjectTaskBySequence(projectIdentifier, sequence);
		return projectTaskRepository.save(projectTask);
	}
	
	public void deleteProjectTaskBySequence(String projectIdentifier, String sequence) {
		ProjectTask projectTask = findProjectTaskBySequence(projectIdentifier, sequence);
		projectTaskRepository.deleteById(projectTask.getId());
	}
	}

}
