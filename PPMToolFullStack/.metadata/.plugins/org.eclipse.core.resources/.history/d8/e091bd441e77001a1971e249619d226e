package com.sathish.reactapplication.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.sathish.reactapplication.domain.Backlog;
import com.sathish.reactapplication.domain.Project;
import com.sathish.reactapplication.exception.ProjectIdException;
import com.sathish.reactapplication.repositories.ProjectRepository;

@Service
public class ProjectService {
	@Autowired
	private ProjectRepository projectRepository;

	@CacheEvict(value = "projects", allEntries = true)
//	@CachePut(value = "projects")
	public Project saveOrUpdateProject(Project project) {
		try {
			project.setProjectIdentifier(project.getProjectIdentifier().toUpperCase());
			if(project.getId()==null) {
				Backlog backlog=new Backlog();
				project.setBacklog(backlog);
				backlog.setProjectIdentifier(project.getProjectIdentifier().toUpperCase());
				backlog.setProject(project);
			}
			return projectRepository.save(project);
		} catch (Exception e) {
			throw new ProjectIdException(
					"Project ID '" + project.getProjectIdentifier().toUpperCase() + "' already exists");
		}
	}

	public Project findByProjectIdentifier(String projectIdentifier) {
		Project project = projectRepository.findByProjectIdentifier(projectIdentifier.toUpperCase());
		if (project!=null)
			return project;
		throw new ProjectIdException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
	}

	@Cacheable(value = "projects")
	public List<Project> findAllProjects() {
		return projectRepository.findAll();
	}

	@CacheEvict(value = "projects", allEntries = true)
	public void deleteByProjectIdentifier(String projectIdentifier) {
		Project project = projectRepository.findByProjectIdentifier(projectIdentifier.toUpperCase());
		if (project!=null) {
			projectRepository.deleteById(project.getId());
		}else {
			throw new ProjectIdException("Project ID '" + projectIdentifier.toUpperCase() + "' doesn't exists");
			}
	}
}
